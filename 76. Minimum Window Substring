class Solution {
public:
    string minWindow(string s, string t) {
       if(s.size() == 0 || t.size() == 0) return "";
        
        int l = 0, r = 0;
        int minLen = INT_MAX;
        string minStr;
        map<char, int> tCount, curCount;
        
        for(int i = 0; i < t.size(); i++){
            tCount[t[i]]++;
        }
        
    
        vector<pair<int, char>> filteredS;
        for(int i = 0; i < s.size(); i++){
            if(tCount.find(s[i]) != tCount.end()){
                filteredS.push_back(make_pair(i, s[i]));
            }
        }
        
        
        int required = tCount.size();
        int possessed = 0;
        while(r < filteredS.size()){
            int end = filteredS[r].first;
            char c = filteredS[r].second;
            curCount[c]++;
            if((tCount.find(c) != tCount.end()) && 
              curCount[c] == tCount[c]){
                possessed++;
            }
            while((possessed == required) && (l <= r)){
                char c = filteredS[l].second;
                int start = filteredS[l].first;
                if(end-start+1 < minLen){
                    minLen = end-start+1;
                    minStr = s.substr(start, end-start+1);
                }
                
                curCount[c]--;
                if(tCount.find(c) != tCount.end()
                  && curCount[c] == tCount[c]-1){
                    possessed--;
                }
                l++;
            }
            
            r++;            
        }
        
        return minStr; 
    }
};
